// <copyright file="UndoRedo.cs" company="Koji Natsuhara (ID: 11666900)">
// Copyright (c) Koji Natsuhara (ID: 11666900). All rights reserved.
// </copyright>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CptS321;

namespace SpreadsheetEngine
{
    /// <summary>
    /// Class that contains all the Undo/Redo classes generated by the UndoRedoCollection class.
    /// </summary>
    public class UndoRedo
    {
        /// <summary>
        /// Contains all the commands for Undo.
        /// </summary>
        private Stack<UndoRedoCollection> mUndo = new Stack<UndoRedoCollection>();

        /// <summary>
        /// Contains all the commands for Redo.
        /// </summary>
        private Stack<UndoRedoCollection> mRedo = new Stack<UndoRedoCollection>();

        /// <summary>
        /// Adds an Undo command to mUndo stack.
        /// </summary>
        /// <param name="item">UndoRedoCollection.</param>
        public void AddUndo(UndoRedoCollection item)
        {
            this.mUndo.Push(item);
            this.mRedo.Clear(); // clear Redo Stack since new things were inputted into undo stack
        }

        /// <summary>
        /// Performs the Undo command and pops the item command off mUndo and pushes it to mRedo stack.
        /// </summary>
        /// <returns>The Undo command item.</returns>
        public UndoRedoCollection PerformUndo()
        {
            UndoRedoCollection temp = this.mUndo.Pop(); // pop top of undo stack
            this.mRedo.Push(temp); // add undo to redo
            return temp; // return top undo item to execute
        }

        /// <summary>
        /// Performs the Redo command and pops the item command off mUndo and pushes it to mUndo stack.
        /// </summary>
        /// <returns>The Redo command item.</returns>
        public UndoRedoCollection PerformRedo() // pop off item at top of redo and push it onto undo
        {
            UndoRedoCollection temp = this.mRedo.Pop();
            this.mUndo.Push(temp);
            return temp; // return item that was on top of redo stack
        }

        /// <summary>
        /// Checks if the Undo stack is empty.
        /// </summary>
        /// <returns>True if the undo stack is empty, false otherwise.</returns>
        public bool IsUndoEmpty() // true if undo stack is empty
        {
            if (this.mUndo.Count == 0)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// Checks if the Redo stack is empty.
        /// </summary>
        /// <returns>True if the redo stack is empty, false otherwise.</returns>
        public bool IsRedoEmpty()
        {
            if (this.mRedo.Count == 0)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// Gets the text message from the Undo stack.
        /// </summary>
        /// <returns>Returns the message for which Undo command is performed.</returns>
        public string GetUndoMessage() // returns top items text or task
        {
            UndoRedoCollection temp = this.mUndo.Peek();
            return temp.Task;
        }

        /// <summary>
        /// Gets the text message from the Redo stack.
        /// </summary>
        /// <returns>Returns the message for which Redo command is performed.</returns>
        public string GetRedoMessage() // same as above but for redo stack
        {
            UndoRedoCollection temp = this.mRedo.Peek();
            return temp.Task;
        }
    }
}
